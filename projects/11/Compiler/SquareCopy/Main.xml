<class>
	<KEYWORD> class </KEYWORD> 
	<Identifier>
		Identifier: Main
Category: class
State: defined
Index: N/A
	</Identifier>
	<SYMBOL> { </SYMBOL> 
	<classVarDec>
		<KEYWORD> static </KEYWORD> 
		<KEYWORD> boolean </KEYWORD> 
		<Identifier>
			Identifier: test
Category: static
State: defined
Index: 0
		</Identifier>
		<SYMBOL> ; </SYMBOL> 
	</classVarDec>
	<subroutineDec>
		<KEYWORD> function </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: main
Category: function
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<varDec>
				<KEYWORD> var </KEYWORD> 
				<IDENTIFIER> SquareGame </IDENTIFIER> 
				<Identifier>
					Identifier: game
Category: var
State: defined
Index: 0
				</Identifier>
				<SYMBOL> ; </SYMBOL> 
			</varDec>
			<statements>
				<letStatement>
					<KEYWORD> let </KEYWORD> 
					<Identifier>
						Identifier: game
Category: var
State: used
Index: 0
					</Identifier>
					<SYMBOL> = </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: SquareGame
Category: var
State: defined
Index: 1
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: new
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</letStatement>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: game
Category: var
State: used
Index: 0
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: run
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: game
Category: var
State: used
Index: 0
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: dispose
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> function </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: test
Category: function
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<varDec>
				<KEYWORD> var </KEYWORD> 
				<KEYWORD> int </KEYWORD> 
				<Identifier>
					Identifier: i
Category: var
State: defined
Index: 2
				</Identifier>
				<SYMBOL> , </SYMBOL> 
				<Identifier>
					Identifier: j
Category: var
State: defined
Index: 3
				</Identifier>
				<SYMBOL> ; </SYMBOL> 
			</varDec>
			<varDec>
				<KEYWORD> var </KEYWORD> 
				<IDENTIFIER> String </IDENTIFIER> 
				<Identifier>
					Identifier: s
Category: var
State: defined
Index: 4
				</Identifier>
				<SYMBOL> ; </SYMBOL> 
			</varDec>
			<varDec>
				<KEYWORD> var </KEYWORD> 
				<IDENTIFIER> Array </IDENTIFIER> 
				<Identifier>
					Identifier: a
Category: var
State: defined
Index: 5
				</Identifier>
				<SYMBOL> ; </SYMBOL> 
			</varDec>
			<statements>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<KEYWORD> false </KEYWORD> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: s
Category: var
State: used
Index: 4
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<STRING_CONST> string constant </STRING_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: s
Category: var
State: used
Index: 4
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<KEYWORD> null </KEYWORD> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: a[1]
Category: var
State: defined
Index: 6
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: a[2]
Category: var
State: defined
Index: 7
									</Identifier>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
					<KEYWORD> else </KEYWORD> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: i
Category: var
State: used
Index: 2
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: i
Category: var
State: used
Index: 2
									</Identifier>
								</term>
								<SYMBOL> * </SYMBOL> 
								<term>
									<SYMBOL> ( </SYMBOL> 
									<expression>
										<term>
											<SYMBOL> - </SYMBOL> 
											<term>
												<Identifier>
													Identifier: j
Category: var
State: used
Index: 3
												</Identifier>
											</term>
										</term>
									</expression>
									<SYMBOL> ) </SYMBOL> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: j
Category: var
State: used
Index: 3
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: j
Category: var
State: used
Index: 3
									</Identifier>
								</term>
								<SYMBOL> / </SYMBOL> 
								<term>
									<SYMBOL> ( </SYMBOL> 
									<expression>
										<term>
											<SYMBOL> - </SYMBOL> 
											<term>
												<INT_CONST> 2 </INT_CONST> 
											</term>
										</term>
									</expression>
									<SYMBOL> ) </SYMBOL> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: i
Category: var
State: used
Index: 2
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: i
Category: var
State: used
Index: 2
									</Identifier>
								</term>
								<SYMBOL> | </SYMBOL> 
								<term>
									<Identifier>
										Identifier: j
Category: var
State: used
Index: 3
									</Identifier>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
</class>

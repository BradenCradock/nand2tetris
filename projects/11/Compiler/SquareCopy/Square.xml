<class>
	<KEYWORD> class </KEYWORD> 
	<Identifier>
		Identifier: Square
Category: class
State: defined
Index: N/A
	</Identifier>
	<SYMBOL> { </SYMBOL> 
	<classVarDec>
		<KEYWORD> field </KEYWORD> 
		<KEYWORD> int </KEYWORD> 
		<Identifier>
			Identifier: x
Category: field
State: int
Index: test
		</Identifier>
		<SYMBOL> , </SYMBOL> 
		<Identifier>
			Identifier: y
Category: field
State: int
Index: test
		</Identifier>
		<SYMBOL> ; </SYMBOL> 
	</classVarDec>
	<classVarDec>
		<KEYWORD> field </KEYWORD> 
		<KEYWORD> int </KEYWORD> 
		<Identifier>
			Identifier: size
Category: field
State: int
Index: test
		</Identifier>
		<SYMBOL> ; </SYMBOL> 
	</classVarDec>
	<subroutineDec>
		<KEYWORD> constructor </KEYWORD> 
		<IDENTIFIER> Square </IDENTIFIER> 
		<Identifier>
			Identifier: new
Category: constructor
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<parameterList>
			<KEYWORD> int </KEYWORD> 
			<Identifier>
				Identifier: Ax
Category: arg
State: int
Index: test
			</Identifier>
			<SYMBOL> , </SYMBOL> 
			<KEYWORD> int </KEYWORD> 
			<Identifier>
				Identifier: Ay
Category: arg
State: int
Index: test
			</Identifier>
			<SYMBOL> , </SYMBOL> 
			<KEYWORD> int </KEYWORD> 
			<Identifier>
				Identifier: Asize
Category: arg
State: int
Index: test
			</Identifier>
		</parameterList>
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<letStatement>
					<KEYWORD> let </KEYWORD> 
					<Identifier>
						Identifier: x
Category: var
State: var
Index: test
					</Identifier>
					<SYMBOL> = </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: Ax
Category: var
State: used
Index: test
							</Identifier>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</letStatement>
				<letStatement>
					<KEYWORD> let </KEYWORD> 
					<Identifier>
						Identifier: y
Category: var
State: var
Index: test
					</Identifier>
					<SYMBOL> = </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: Ay
Category: var
State: used
Index: test
							</Identifier>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</letStatement>
				<letStatement>
					<KEYWORD> let </KEYWORD> 
					<Identifier>
						Identifier: size
Category: var
State: var
Index: test
					</Identifier>
					<SYMBOL> = </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: Asize
Category: var
State: used
Index: test
							</Identifier>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</letStatement>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: draw
Category: var
State: used
Index: test
							</Identifier>
							<subroutineCall>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<expression>
						<term>
							<KEYWORD> this </KEYWORD> 
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: dispose
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: Memory
Category: var
State: used
Index: test
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: deAlloc
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<KEYWORD> this </KEYWORD> 
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: draw
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: Screen
Category: var
State: used
Index: test
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: setColor
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<KEYWORD> true </KEYWORD> 
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: Screen
Category: var
State: used
Index: test
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: drawRectangle
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<Identifier>
												Identifier: x
Category: var
State: used
Index: test
											</Identifier>
										</term>
									</expression>
									<SYMBOL> , </SYMBOL> 
									<expression>
										<term>
											<Identifier>
												Identifier: y
Category: var
State: used
Index: test
											</Identifier>
										</term>
									</expression>
									<SYMBOL> , </SYMBOL> 
									<expression>
										<term>
											<Identifier>
												Identifier: x
Category: var
State: used
Index: test
											</Identifier>
										</term>
										<SYMBOL> + </SYMBOL> 
										<term>
											<Identifier>
												Identifier: size
Category: var
State: used
Index: test
											</Identifier>
										</term>
									</expression>
									<SYMBOL> , </SYMBOL> 
									<expression>
										<term>
											<Identifier>
												Identifier: y
Category: var
State: used
Index: test
											</Identifier>
										</term>
										<SYMBOL> + </SYMBOL> 
										<term>
											<Identifier>
												Identifier: size
Category: var
State: used
Index: test
											</Identifier>
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: erase
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: Screen
Category: var
State: used
Index: test
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: setColor
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<KEYWORD> false </KEYWORD> 
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: Screen
Category: var
State: used
Index: test
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: drawRectangle
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<Identifier>
												Identifier: x
Category: var
State: used
Index: test
											</Identifier>
										</term>
									</expression>
									<SYMBOL> , </SYMBOL> 
									<expression>
										<term>
											<Identifier>
												Identifier: y
Category: var
State: used
Index: test
											</Identifier>
										</term>
									</expression>
									<SYMBOL> , </SYMBOL> 
									<expression>
										<term>
											<Identifier>
												Identifier: x
Category: var
State: used
Index: test
											</Identifier>
										</term>
										<SYMBOL> + </SYMBOL> 
										<term>
											<Identifier>
												Identifier: size
Category: var
State: used
Index: test
											</Identifier>
										</term>
									</expression>
									<SYMBOL> , </SYMBOL> 
									<expression>
										<term>
											<Identifier>
												Identifier: y
Category: var
State: used
Index: test
											</Identifier>
										</term>
										<SYMBOL> + </SYMBOL> 
										<term>
											<Identifier>
												Identifier: size
Category: var
State: used
Index: test
											</Identifier>
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: incSize
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<SYMBOL> ( </SYMBOL> 
									<expression>
										<term>
											<Identifier>
												Identifier: y
Category: var
State: used
Index: test
											</Identifier>
										</term>
										<SYMBOL> + </SYMBOL> 
										<term>
											<Identifier>
												Identifier: size
Category: var
State: used
Index: test
											</Identifier>
										</term>
									</expression>
									<SYMBOL> ) </SYMBOL> 
								</term>
								<SYMBOL> &lt; </SYMBOL> 
								<term>
									<INT_CONST> 254 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
						</term>
						<SYMBOL> &amp; </SYMBOL> 
						<term>
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<SYMBOL> ( </SYMBOL> 
									<expression>
										<term>
											<Identifier>
												Identifier: x
Category: var
State: used
Index: test
											</Identifier>
										</term>
										<SYMBOL> + </SYMBOL> 
										<term>
											<Identifier>
												Identifier: size
Category: var
State: used
Index: test
											</Identifier>
										</term>
									</expression>
									<SYMBOL> ) </SYMBOL> 
								</term>
								<SYMBOL> &lt; </SYMBOL> 
								<term>
									<INT_CONST> 510 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: erase
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: size
Category: var
State: var
Index: test
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: size
Category: var
State: used
Index: test
									</Identifier>
								</term>
								<SYMBOL> + </SYMBOL> 
								<term>
									<INT_CONST> 2 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: draw
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: decSize
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: size
Category: var
State: used
Index: test
							</Identifier>
						</term>
						<SYMBOL> $gt; </SYMBOL> 
						<term>
							<INT_CONST> 2 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: erase
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: size
Category: var
State: var
Index: test
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: size
Category: var
State: used
Index: test
									</Identifier>
								</term>
								<SYMBOL> - </SYMBOL> 
								<term>
									<INT_CONST> 2 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: draw
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: moveUp
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: y
Category: var
State: used
Index: test
							</Identifier>
						</term>
						<SYMBOL> $gt; </SYMBOL> 
						<term>
							<INT_CONST> 1 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: setColor
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<KEYWORD> false </KEYWORD> 
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: drawRectangle
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<SYMBOL> ( </SYMBOL> 
													<expression>
														<term>
															<Identifier>
																Identifier: y
Category: var
State: used
Index: test
															</Identifier>
														</term>
														<SYMBOL> + </SYMBOL> 
														<term>
															<Identifier>
																Identifier: size
Category: var
State: used
Index: test
															</Identifier>
														</term>
													</expression>
													<SYMBOL> ) </SYMBOL> 
												</term>
												<SYMBOL> - </SYMBOL> 
												<term>
													<INT_CONST> 1 </INT_CONST> 
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: y
Category: var
State: var
Index: test
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: y
Category: var
State: used
Index: test
									</Identifier>
								</term>
								<SYMBOL> - </SYMBOL> 
								<term>
									<INT_CONST> 2 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: setColor
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<KEYWORD> true </KEYWORD> 
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: drawRectangle
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<INT_CONST> 1 </INT_CONST> 
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: moveDown
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: y
Category: var
State: used
Index: test
									</Identifier>
								</term>
								<SYMBOL> + </SYMBOL> 
								<term>
									<Identifier>
										Identifier: size
Category: var
State: used
Index: test
									</Identifier>
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
						</term>
						<SYMBOL> &lt; </SYMBOL> 
						<term>
							<INT_CONST> 254 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: setColor
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<KEYWORD> false </KEYWORD> 
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: drawRectangle
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<INT_CONST> 1 </INT_CONST> 
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: y
Category: var
State: var
Index: test
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: y
Category: var
State: used
Index: test
									</Identifier>
								</term>
								<SYMBOL> + </SYMBOL> 
								<term>
									<INT_CONST> 2 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: setColor
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<KEYWORD> true </KEYWORD> 
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: drawRectangle
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<SYMBOL> ( </SYMBOL> 
													<expression>
														<term>
															<Identifier>
																Identifier: y
Category: var
State: used
Index: test
															</Identifier>
														</term>
														<SYMBOL> + </SYMBOL> 
														<term>
															<Identifier>
																Identifier: size
Category: var
State: used
Index: test
															</Identifier>
														</term>
													</expression>
													<SYMBOL> ) </SYMBOL> 
												</term>
												<SYMBOL> - </SYMBOL> 
												<term>
													<INT_CONST> 1 </INT_CONST> 
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: moveLeft
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: x
Category: var
State: used
Index: test
							</Identifier>
						</term>
						<SYMBOL> $gt; </SYMBOL> 
						<term>
							<INT_CONST> 1 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: setColor
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<KEYWORD> false </KEYWORD> 
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: drawRectangle
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<SYMBOL> ( </SYMBOL> 
													<expression>
														<term>
															<Identifier>
																Identifier: x
Category: var
State: used
Index: test
															</Identifier>
														</term>
														<SYMBOL> + </SYMBOL> 
														<term>
															<Identifier>
																Identifier: size
Category: var
State: used
Index: test
															</Identifier>
														</term>
													</expression>
													<SYMBOL> ) </SYMBOL> 
												</term>
												<SYMBOL> - </SYMBOL> 
												<term>
													<INT_CONST> 1 </INT_CONST> 
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: x
Category: var
State: var
Index: test
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: x
Category: var
State: used
Index: test
									</Identifier>
								</term>
								<SYMBOL> - </SYMBOL> 
								<term>
									<INT_CONST> 2 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: setColor
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<KEYWORD> true </KEYWORD> 
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: drawRectangle
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<INT_CONST> 1 </INT_CONST> 
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: moveRight
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: x
Category: var
State: used
Index: test
									</Identifier>
								</term>
								<SYMBOL> + </SYMBOL> 
								<term>
									<Identifier>
										Identifier: size
Category: var
State: used
Index: test
									</Identifier>
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
						</term>
						<SYMBOL> &lt; </SYMBOL> 
						<term>
							<INT_CONST> 510 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: setColor
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<KEYWORD> false </KEYWORD> 
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: drawRectangle
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<INT_CONST> 1 </INT_CONST> 
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: x
Category: var
State: var
Index: test
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: x
Category: var
State: used
Index: test
									</Identifier>
								</term>
								<SYMBOL> + </SYMBOL> 
								<term>
									<INT_CONST> 2 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: setColor
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<KEYWORD> true </KEYWORD> 
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Screen
Category: var
State: used
Index: test
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: drawRectangle
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<SYMBOL> ( </SYMBOL> 
													<expression>
														<term>
															<Identifier>
																Identifier: x
Category: var
State: used
Index: test
															</Identifier>
														</term>
														<SYMBOL> + </SYMBOL> 
														<term>
															<Identifier>
																Identifier: size
Category: var
State: used
Index: test
															</Identifier>
														</term>
													</expression>
													<SYMBOL> ) </SYMBOL> 
												</term>
												<SYMBOL> - </SYMBOL> 
												<term>
													<INT_CONST> 1 </INT_CONST> 
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: x
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: y
Category: var
State: used
Index: test
													</Identifier>
												</term>
												<SYMBOL> + </SYMBOL> 
												<term>
													<Identifier>
														Identifier: size
Category: var
State: used
Index: test
													</Identifier>
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
</class>

<class>
	<KEYWORD> class </KEYWORD> 
	<Identifier>
		Identifier: SquareGame
Category: class
State: defined
Index: N/A
	</Identifier>
	<SYMBOL> { </SYMBOL> 
	<classVarDec>
		<KEYWORD> field </KEYWORD> 
		<IDENTIFIER> Square </IDENTIFIER> 
		<Identifier>
			Identifier: square
Category: field
State: defined
Index: 0
		</Identifier>
		<SYMBOL> ; </SYMBOL> 
	</classVarDec>
	<classVarDec>
		<KEYWORD> field </KEYWORD> 
		<KEYWORD> int </KEYWORD> 
		<Identifier>
			Identifier: direction
Category: field
State: defined
Index: 1
		</Identifier>
		<SYMBOL> ; </SYMBOL> 
	</classVarDec>
	<subroutineDec>
		<KEYWORD> constructor </KEYWORD> 
		<IDENTIFIER> SquareGame </IDENTIFIER> 
		<Identifier>
			Identifier: new
Category: constructor
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<letStatement>
					<KEYWORD> let </KEYWORD> 
					<Identifier>
						Identifier: square
Category: var
State: used
Index: 0
					</Identifier>
					<SYMBOL> = </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: Square
Category: function
State: used
Index: N/A
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: new
Category: function
State: used
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<INT_CONST> 0 </INT_CONST> 
										</term>
									</expression>
									<SYMBOL> , </SYMBOL> 
									<expression>
										<term>
											<INT_CONST> 0 </INT_CONST> 
										</term>
									</expression>
									<SYMBOL> , </SYMBOL> 
									<expression>
										<term>
											<INT_CONST> 30 </INT_CONST> 
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</letStatement>
				<letStatement>
					<KEYWORD> let </KEYWORD> 
					<Identifier>
						Identifier: direction
Category: var
State: used
Index: 1
					</Identifier>
					<SYMBOL> = </SYMBOL> 
					<expression>
						<term>
							<INT_CONST> 0 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</letStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<expression>
						<term>
							<KEYWORD> this </KEYWORD> 
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: dispose
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: square
Category: var
State: used
Index: 0
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: dispose
Category: function
State: used
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: Memory
Category: function
State: used
Index: N/A
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: deAlloc
Category: function
State: used
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<KEYWORD> this </KEYWORD> 
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: moveSquare
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: direction
Category: var
State: used
Index: 1
							</Identifier>
						</term>
						<SYMBOL> = </SYMBOL> 
						<term>
							<INT_CONST> 1 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: square
Category: var
State: used
Index: 0
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: moveUp
Category: function
State: used
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: direction
Category: var
State: used
Index: 1
							</Identifier>
						</term>
						<SYMBOL> = </SYMBOL> 
						<term>
							<INT_CONST> 2 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: square
Category: var
State: used
Index: 0
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: moveDown
Category: function
State: used
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: direction
Category: var
State: used
Index: 1
							</Identifier>
						</term>
						<SYMBOL> = </SYMBOL> 
						<term>
							<INT_CONST> 3 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: square
Category: var
State: used
Index: 0
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: moveLeft
Category: function
State: used
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: direction
Category: var
State: used
Index: 1
							</Identifier>
						</term>
						<SYMBOL> = </SYMBOL> 
						<term>
							<INT_CONST> 4 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: square
Category: var
State: used
Index: 0
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: moveRight
Category: function
State: used
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: Sys
Category: function
State: used
Index: N/A
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: wait
Category: function
State: used
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<INT_CONST> 5 </INT_CONST> 
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> method </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: run
Category: method
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<varDec>
				<KEYWORD> var </KEYWORD> 
				<KEYWORD> char </KEYWORD> 
				<Identifier>
					Identifier: key
Category: var
State: defined
Index: 0
				</Identifier>
				<SYMBOL> ; </SYMBOL> 
			</varDec>
			<varDec>
				<KEYWORD> var </KEYWORD> 
				<KEYWORD> boolean </KEYWORD> 
				<Identifier>
					Identifier: exit
Category: var
State: defined
Index: 1
				</Identifier>
				<SYMBOL> ; </SYMBOL> 
			</varDec>
			<statements>
				<letStatement>
					<KEYWORD> let </KEYWORD> 
					<Identifier>
						Identifier: exit
Category: var
State: used
Index: 1
					</Identifier>
					<SYMBOL> = </SYMBOL> 
					<expression>
						<term>
							<KEYWORD> false </KEYWORD> 
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</letStatement>
				<whileStatement>
					<KEYWORD> while </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<SYMBOL> ~exit </SYMBOL> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<whileStatement>
							<KEYWORD> while </KEYWORD> 
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: key
Category: var
State: used
Index: 0
									</Identifier>
								</term>
								<SYMBOL> = </SYMBOL> 
								<term>
									<INT_CONST> 0 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<letStatement>
									<KEYWORD> let </KEYWORD> 
									<Identifier>
										Identifier: key
Category: var
State: used
Index: 0
									</Identifier>
									<SYMBOL> = </SYMBOL> 
									<expression>
										<term>
											<Identifier>
												Identifier: Keyboard
Category: function
State: used
Index: N/A
											</Identifier>
											<subroutineCall>
												<SYMBOL> . </SYMBOL> 
												<Identifier>
													Identifier: keyPressed
Category: function
State: used
Index: N/A
												</Identifier>
												<SYMBOL> ( </SYMBOL> 
												<expressionList>
												</expressionList>
												<SYMBOL> ) </SYMBOL> 
											</subroutineCall>
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</letStatement>
								<doStatement>
									<KEYWORD> do </KEYWORD> 
									<expression>
										<term>
											<Identifier>
												Identifier: moveSquare
Category: function
State: used
Index: N/A
											</Identifier>
											<subroutineCall>
												<SYMBOL> ( </SYMBOL> 
												<expressionList>
												</expressionList>
												<SYMBOL> ) </SYMBOL> 
											</subroutineCall>
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</doStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
						</whileStatement>
						<ifStatement>
							<KEYWORD> if </KEYWORD> 
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: key
Category: var
State: used
Index: 0
									</Identifier>
								</term>
								<SYMBOL> = </SYMBOL> 
								<term>
									<INT_CONST> 81 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<letStatement>
									<KEYWORD> let </KEYWORD> 
									<Identifier>
										Identifier: exit
Category: var
State: used
Index: 1
									</Identifier>
									<SYMBOL> = </SYMBOL> 
									<expression>
										<term>
											<KEYWORD> true </KEYWORD> 
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</letStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
						</ifStatement>
						<ifStatement>
							<KEYWORD> if </KEYWORD> 
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: key
Category: var
State: used
Index: 0
									</Identifier>
								</term>
								<SYMBOL> = </SYMBOL> 
								<term>
									<INT_CONST> 90 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<doStatement>
									<KEYWORD> do </KEYWORD> 
									<expression>
										<term>
											<Identifier>
												Identifier: square
Category: var
State: used
Index: 0
											</Identifier>
											<subroutineCall>
												<SYMBOL> . </SYMBOL> 
												<Identifier>
													Identifier: decSize
Category: function
State: used
Index: N/A
												</Identifier>
												<SYMBOL> ( </SYMBOL> 
												<expressionList>
												</expressionList>
												<SYMBOL> ) </SYMBOL> 
											</subroutineCall>
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</doStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
						</ifStatement>
						<ifStatement>
							<KEYWORD> if </KEYWORD> 
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: key
Category: var
State: used
Index: 0
									</Identifier>
								</term>
								<SYMBOL> = </SYMBOL> 
								<term>
									<INT_CONST> 88 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<doStatement>
									<KEYWORD> do </KEYWORD> 
									<expression>
										<term>
											<Identifier>
												Identifier: square
Category: var
State: used
Index: 0
											</Identifier>
											<subroutineCall>
												<SYMBOL> . </SYMBOL> 
												<Identifier>
													Identifier: incSize
Category: function
State: used
Index: N/A
												</Identifier>
												<SYMBOL> ( </SYMBOL> 
												<expressionList>
												</expressionList>
												<SYMBOL> ) </SYMBOL> 
											</subroutineCall>
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</doStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
						</ifStatement>
						<ifStatement>
							<KEYWORD> if </KEYWORD> 
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: key
Category: var
State: used
Index: 0
									</Identifier>
								</term>
								<SYMBOL> = </SYMBOL> 
								<term>
									<INT_CONST> 131 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<letStatement>
									<KEYWORD> let </KEYWORD> 
									<Identifier>
										Identifier: direction
Category: var
State: used
Index: 1
									</Identifier>
									<SYMBOL> = </SYMBOL> 
									<expression>
										<term>
											<INT_CONST> 1 </INT_CONST> 
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</letStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
						</ifStatement>
						<ifStatement>
							<KEYWORD> if </KEYWORD> 
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: key
Category: var
State: used
Index: 0
									</Identifier>
								</term>
								<SYMBOL> = </SYMBOL> 
								<term>
									<INT_CONST> 133 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<letStatement>
									<KEYWORD> let </KEYWORD> 
									<Identifier>
										Identifier: direction
Category: var
State: used
Index: 1
									</Identifier>
									<SYMBOL> = </SYMBOL> 
									<expression>
										<term>
											<INT_CONST> 2 </INT_CONST> 
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</letStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
						</ifStatement>
						<ifStatement>
							<KEYWORD> if </KEYWORD> 
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: key
Category: var
State: used
Index: 0
									</Identifier>
								</term>
								<SYMBOL> = </SYMBOL> 
								<term>
									<INT_CONST> 130 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<letStatement>
									<KEYWORD> let </KEYWORD> 
									<Identifier>
										Identifier: direction
Category: var
State: used
Index: 1
									</Identifier>
									<SYMBOL> = </SYMBOL> 
									<expression>
										<term>
											<INT_CONST> 3 </INT_CONST> 
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</letStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
						</ifStatement>
						<ifStatement>
							<KEYWORD> if </KEYWORD> 
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: key
Category: var
State: used
Index: 0
									</Identifier>
								</term>
								<SYMBOL> = </SYMBOL> 
								<term>
									<INT_CONST> 132 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<letStatement>
									<KEYWORD> let </KEYWORD> 
									<Identifier>
										Identifier: direction
Category: var
State: used
Index: 1
									</Identifier>
									<SYMBOL> = </SYMBOL> 
									<expression>
										<term>
											<INT_CONST> 4 </INT_CONST> 
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</letStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
						</ifStatement>
						<whileStatement>
							<KEYWORD> while </KEYWORD> 
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<SYMBOL> ~ </SYMBOL> 
									<term>
										<SYMBOL> ( </SYMBOL> 
										<expression>
											<term>
												<Identifier>
													Identifier: key
Category: var
State: used
Index: 0
												</Identifier>
											</term>
											<SYMBOL> = </SYMBOL> 
											<term>
												<INT_CONST> 0 </INT_CONST> 
											</term>
										</expression>
										<SYMBOL> ) </SYMBOL> 
									</term>
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<letStatement>
									<KEYWORD> let </KEYWORD> 
									<Identifier>
										Identifier: key
Category: var
State: used
Index: 0
									</Identifier>
									<SYMBOL> = </SYMBOL> 
									<expression>
										<term>
											<Identifier>
												Identifier: Keyboard
Category: function
State: used
Index: N/A
											</Identifier>
											<subroutineCall>
												<SYMBOL> . </SYMBOL> 
												<Identifier>
													Identifier: keyPressed
Category: function
State: used
Index: N/A
												</Identifier>
												<SYMBOL> ( </SYMBOL> 
												<expressionList>
												</expressionList>
												<SYMBOL> ) </SYMBOL> 
											</subroutineCall>
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</letStatement>
								<doStatement>
									<KEYWORD> do </KEYWORD> 
									<expression>
										<term>
											<Identifier>
												Identifier: moveSquare
Category: function
State: used
Index: N/A
											</Identifier>
											<subroutineCall>
												<SYMBOL> ( </SYMBOL> 
												<expressionList>
												</expressionList>
												<SYMBOL> ) </SYMBOL> 
											</subroutineCall>
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</doStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
						</whileStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</whileStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
</class>

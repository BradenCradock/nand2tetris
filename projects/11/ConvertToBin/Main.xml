<class>
	<KEYWORD> class </KEYWORD> 
	<Identifier>
		Identifier: Main
Category: class
State: defined
Index: N/A
	</Identifier>
	<SYMBOL> { </SYMBOL> 
	<subroutineDec>
		<KEYWORD> function </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: main
Category: function
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<varDec>
				<KEYWORD> var </KEYWORD> 
				<KEYWORD> int </KEYWORD> 
				<Identifier>
					Identifier: value
Category: var
State: defined
Index: 0
				</Identifier>
				<SYMBOL> ; </SYMBOL> 
			</varDec>
			<statements>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: Main
Category: function
State: used
Index: N/A
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: fillMemory
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<INT_CONST> 8001 </INT_CONST> 
										</term>
									</expression>
									<SYMBOL> , </SYMBOL> 
									<expression>
										<term>
											<INT_CONST> 16 </INT_CONST> 
										</term>
									</expression>
									<SYMBOL> , </SYMBOL> 
									<expression>
										<term>
											<SYMBOL> - </SYMBOL> 
											<term>
												<INT_CONST> 1 </INT_CONST> 
											</term>
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<letStatement>
					<KEYWORD> let </KEYWORD> 
					<Identifier>
						Identifier: value
Category: var
State: used
Index: 0
					</Identifier>
					<SYMBOL> = </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: Memory
Category: function
State: used
Index: N/A
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: peek
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<INT_CONST> 8000 </INT_CONST> 
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</letStatement>
				<doStatement>
					<KEYWORD> do </KEYWORD> 
					<expression>
						<term>
							<Identifier>
								Identifier: Main
Category: function
State: used
Index: N/A
							</Identifier>
							<subroutineCall>
								<SYMBOL> . </SYMBOL> 
								<Identifier>
									Identifier: convert
Category: method
State: defined
Index: N/A
								</Identifier>
								<SYMBOL> ( </SYMBOL> 
								<expressionList>
									<expression>
										<term>
											<Identifier>
												Identifier: value
Category: var
State: used
Index: 0
											</Identifier>
										</term>
									</expression>
								</expressionList>
								<SYMBOL> ) </SYMBOL> 
							</subroutineCall>
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</doStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> function </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: convert
Category: function
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<parameterList>
			<KEYWORD> int </KEYWORD> 
			<Identifier>
				Identifier: value
Category: arg
State: used
Index: 0
			</Identifier>
		</parameterList>
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<varDec>
				<KEYWORD> var </KEYWORD> 
				<KEYWORD> int </KEYWORD> 
				<Identifier>
					Identifier: mask
Category: var
State: defined
Index: 1
				</Identifier>
				<SYMBOL> , </SYMBOL> 
				<Identifier>
					Identifier: position
Category: var
State: defined
Index: 2
				</Identifier>
				<SYMBOL> ; </SYMBOL> 
			</varDec>
			<varDec>
				<KEYWORD> var </KEYWORD> 
				<KEYWORD> boolean </KEYWORD> 
				<Identifier>
					Identifier: loop
Category: var
State: defined
Index: 3
				</Identifier>
				<SYMBOL> ; </SYMBOL> 
			</varDec>
			<statements>
				<letStatement>
					<KEYWORD> let </KEYWORD> 
					<Identifier>
						Identifier: loop
Category: var
State: used
Index: 3
					</Identifier>
					<SYMBOL> = </SYMBOL> 
					<expression>
						<term>
							<KEYWORD> true </KEYWORD> 
						</term>
					</expression>
					<SYMBOL> ; </SYMBOL> 
				</letStatement>
				<whileStatement>
					<KEYWORD> while </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: loop
Category: var
State: used
Index: 3
							</Identifier>
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: position
Category: var
State: used
Index: 2
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: position
Category: var
State: used
Index: 2
									</Identifier>
								</term>
								<SYMBOL> + </SYMBOL> 
								<term>
									<INT_CONST> 1 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: mask
Category: var
State: used
Index: 1
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: Main
Category: function
State: used
Index: N/A
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: nextMask
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<Identifier>
														Identifier: mask
Category: var
State: used
Index: 1
													</Identifier>
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<ifStatement>
							<KEYWORD> if </KEYWORD> 
							<SYMBOL> ( </SYMBOL> 
							<expression>
								<term>
									<SYMBOL> ~ </SYMBOL> 
									<term>
										<SYMBOL> ( </SYMBOL> 
										<expression>
											<term>
												<Identifier>
													Identifier: position
Category: var
State: used
Index: 2
												</Identifier>
											</term>
											<SYMBOL> $gt; </SYMBOL> 
											<term>
												<INT_CONST> 16 </INT_CONST> 
											</term>
										</expression>
										<SYMBOL> ) </SYMBOL> 
									</term>
								</term>
							</expression>
							<SYMBOL> ) </SYMBOL> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<ifStatement>
									<KEYWORD> if </KEYWORD> 
									<SYMBOL> ( </SYMBOL> 
									<expression>
										<term>
											<SYMBOL> ~ </SYMBOL> 
											<term>
												<SYMBOL> ( </SYMBOL> 
												<expression>
													<term>
														<SYMBOL> ( </SYMBOL> 
														<expression>
															<term>
																<Identifier>
																	Identifier: value
Category: var
State: used
Index: 0
																</Identifier>
															</term>
															<SYMBOL> &amp; </SYMBOL> 
															<term>
																<Identifier>
																	Identifier: mask
Category: var
State: used
Index: 1
																</Identifier>
															</term>
														</expression>
														<SYMBOL> ) </SYMBOL> 
													</term>
													<SYMBOL> = </SYMBOL> 
													<term>
														<INT_CONST> 0 </INT_CONST> 
													</term>
												</expression>
												<SYMBOL> ) </SYMBOL> 
											</term>
										</term>
									</expression>
									<SYMBOL> ) </SYMBOL> 
									<SYMBOL> { </SYMBOL> 
									<statements>
										<doStatement>
											<KEYWORD> do </KEYWORD> 
											<expression>
												<term>
													<Identifier>
														Identifier: Memory
Category: function
State: used
Index: N/A
													</Identifier>
													<subroutineCall>
														<SYMBOL> . </SYMBOL> 
														<Identifier>
															Identifier: poke
Category: method
State: defined
Index: N/A
														</Identifier>
														<SYMBOL> ( </SYMBOL> 
														<expressionList>
															<expression>
																<term>
																	<INT_CONST> 8000 </INT_CONST> 
																</term>
																<SYMBOL> + </SYMBOL> 
																<term>
																	<Identifier>
																		Identifier: position
Category: var
State: used
Index: 2
																	</Identifier>
																</term>
															</expression>
															<SYMBOL> , </SYMBOL> 
															<expression>
																<term>
																	<INT_CONST> 1 </INT_CONST> 
																</term>
															</expression>
														</expressionList>
														<SYMBOL> ) </SYMBOL> 
													</subroutineCall>
												</term>
											</expression>
											<SYMBOL> ; </SYMBOL> 
										</doStatement>
									</statements>
									<SYMBOL> } </SYMBOL> 
									<KEYWORD> else </KEYWORD> 
									<SYMBOL> { </SYMBOL> 
									<statements>
										<doStatement>
											<KEYWORD> do </KEYWORD> 
											<expression>
												<term>
													<Identifier>
														Identifier: Memory
Category: function
State: used
Index: N/A
													</Identifier>
													<subroutineCall>
														<SYMBOL> . </SYMBOL> 
														<Identifier>
															Identifier: poke
Category: method
State: defined
Index: N/A
														</Identifier>
														<SYMBOL> ( </SYMBOL> 
														<expressionList>
															<expression>
																<term>
																	<INT_CONST> 8000 </INT_CONST> 
																</term>
																<SYMBOL> + </SYMBOL> 
																<term>
																	<Identifier>
																		Identifier: position
Category: var
State: used
Index: 2
																	</Identifier>
																</term>
															</expression>
															<SYMBOL> , </SYMBOL> 
															<expression>
																<term>
																	<INT_CONST> 0 </INT_CONST> 
																</term>
															</expression>
														</expressionList>
														<SYMBOL> ) </SYMBOL> 
													</subroutineCall>
												</term>
											</expression>
											<SYMBOL> ; </SYMBOL> 
										</doStatement>
									</statements>
									<SYMBOL> } </SYMBOL> 
								</ifStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
							<KEYWORD> else </KEYWORD> 
							<SYMBOL> { </SYMBOL> 
							<statements>
								<letStatement>
									<KEYWORD> let </KEYWORD> 
									<Identifier>
										Identifier: loop
Category: var
State: used
Index: 3
									</Identifier>
									<SYMBOL> = </SYMBOL> 
									<expression>
										<term>
											<KEYWORD> false </KEYWORD> 
										</term>
									</expression>
									<SYMBOL> ; </SYMBOL> 
								</letStatement>
							</statements>
							<SYMBOL> } </SYMBOL> 
						</ifStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</whileStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> function </KEYWORD> 
		<KEYWORD> int </KEYWORD> 
		<Identifier>
			Identifier: nextMask
Category: function
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<parameterList>
			<KEYWORD> int </KEYWORD> 
			<Identifier>
				Identifier: mask
Category: arg
State: used
Index: 1
			</Identifier>
		</parameterList>
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<ifStatement>
					<KEYWORD> if </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: mask
Category: var
State: used
Index: 1
							</Identifier>
						</term>
						<SYMBOL> = </SYMBOL> 
						<term>
							<INT_CONST> 0 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<returnStatement>
							<KEYWORD> return </KEYWORD> 
							<expression>
								<term>
									<INT_CONST> 1 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</returnStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
					<KEYWORD> else </KEYWORD> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<returnStatement>
							<KEYWORD> return </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: mask
Category: var
State: used
Index: 1
									</Identifier>
								</term>
								<SYMBOL> * </SYMBOL> 
								<term>
									<INT_CONST> 2 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</returnStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</ifStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<KEYWORD> function </KEYWORD> 
		<KEYWORD> void </KEYWORD> 
		<Identifier>
			Identifier: fillMemory
Category: function
State: defined
Index: N/A
		</Identifier>
		<SYMBOL> ( </SYMBOL> 
		<parameterList>
			<KEYWORD> int </KEYWORD> 
			<Identifier>
				Identifier: startAddress
Category: arg
State: defined
Index: 0
			</Identifier>
			<SYMBOL> , </SYMBOL> 
			<KEYWORD> int </KEYWORD> 
			<Identifier>
				Identifier: length
Category: arg
State: defined
Index: 1
			</Identifier>
			<SYMBOL> , </SYMBOL> 
			<KEYWORD> int </KEYWORD> 
			<Identifier>
				Identifier: value
Category: arg
State: used
Index: 0
			</Identifier>
		</parameterList>
		<SYMBOL> ) </SYMBOL> 
		<subroutineBody>
			<SYMBOL> { </SYMBOL> 
			<statements>
				<whileStatement>
					<KEYWORD> while </KEYWORD> 
					<SYMBOL> ( </SYMBOL> 
					<expression>
						<term>
							<Identifier>
								Identifier: length
Category: var
State: used
Index: 1
							</Identifier>
						</term>
						<SYMBOL> $gt; </SYMBOL> 
						<term>
							<INT_CONST> 0 </INT_CONST> 
						</term>
					</expression>
					<SYMBOL> ) </SYMBOL> 
					<SYMBOL> { </SYMBOL> 
					<statements>
						<doStatement>
							<KEYWORD> do </KEYWORD> 
							<expression>
								<term>
									<Identifier>
										Identifier: Memory
Category: function
State: used
Index: N/A
									</Identifier>
									<subroutineCall>
										<SYMBOL> . </SYMBOL> 
										<Identifier>
											Identifier: poke
Category: method
State: defined
Index: N/A
										</Identifier>
										<SYMBOL> ( </SYMBOL> 
										<expressionList>
											<expression>
												<term>
													<Identifier>
														Identifier: startAddress
Category: var
State: used
Index: 0
													</Identifier>
												</term>
											</expression>
											<SYMBOL> , </SYMBOL> 
											<expression>
												<term>
													<Identifier>
														Identifier: value
Category: var
State: used
Index: 0
													</Identifier>
												</term>
											</expression>
										</expressionList>
										<SYMBOL> ) </SYMBOL> 
									</subroutineCall>
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</doStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: length
Category: var
State: used
Index: 1
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: length
Category: var
State: used
Index: 1
									</Identifier>
								</term>
								<SYMBOL> - </SYMBOL> 
								<term>
									<INT_CONST> 1 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
						<letStatement>
							<KEYWORD> let </KEYWORD> 
							<Identifier>
								Identifier: startAddress
Category: var
State: used
Index: 0
							</Identifier>
							<SYMBOL> = </SYMBOL> 
							<expression>
								<term>
									<Identifier>
										Identifier: startAddress
Category: var
State: used
Index: 0
									</Identifier>
								</term>
								<SYMBOL> + </SYMBOL> 
								<term>
									<INT_CONST> 1 </INT_CONST> 
								</term>
							</expression>
							<SYMBOL> ; </SYMBOL> 
						</letStatement>
					</statements>
					<SYMBOL> } </SYMBOL> 
				</whileStatement>
				<returnStatement>
					<KEYWORD> return </KEYWORD> 
					<SYMBOL> ; </SYMBOL> 
				</returnStatement>
			</statements>
			<SYMBOL> } </SYMBOL> 
		</subroutineBody>
	</subroutineDec>
</class>
